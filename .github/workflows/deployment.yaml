name: Docker

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      project: ${{ steps.filter.outputs.project }}
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4

      - name: Path Filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            project:
              - '*/Dockerfile'

  build-and-tag-on-merge:
    if: ${{ needs.detect-changes.outputs.project != '' && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs: [detect-changes]
    env:
      PROJECT_DIR: ${{ needs.detect-changes.outputs.project }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - id: release
        run: |
          # Get latest tag, bump it, and append project name
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          VERSION_NUM=${LATEST_TAG#v}
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH-${{ env.PROJECT_DIR }}"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create a GitHub release for the new tag
        run: |
          gh release create ${{ env.NEW_TAG }} \
            --title "Release ${{ env.NEW_TAG }}" \
            --notes "Release notes for ${{ env.NEW_TAG }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.PROJECT_DIR }}
          file: ./${{ env.PROJECT_DIR }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_NAMESPACE }}/${{ env.PROJECT_DIR }}:latest
            ${{ secrets.DOCKER_HUB_NAMESPACE }}/${{ env.PROJECT_DIR }}:${{ env.NEW_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Refresh Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  build-on-release:
    if: ${{ needs.detect-changes.outputs.project != '' && startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    needs: [detect-changes]
    env:
      PROJECT_DIR: ${{ needs.detect-changes.outputs.project }}
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx

      - name: Get Tag Version
        id: tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Version to be used: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          - name: Build and push
          id: docker_build
          uses: docker/build-push-action@v5
          with:
            context: ./${{ env.PROJECT_DIR }}
            file: ./${{ env.PROJECT_DIR }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_NAMESPACE }}/${{ env.PROJECT_DIR }}:${{ env.VERSION }}
            ${{ secrets.DOCKER_HUB_NAMESPACE }}/${{ env.PROJECT_DIR }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Refresh Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
